#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Countries_module5_DZ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Countries")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertTable1(Table1 instance);
    partial void UpdateTable1(Table1 instance);
    partial void DeleteTable1(Table1 instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Countries_module5_DZ.Properties.Settings.Default.CountriesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Table1> Table1
		{
			get
			{
				return this.GetTable<Table1>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Table1")]
	public partial class Table1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CountryName;
		
		private string _CapitalName;
		
		private long _InhabitantsNumber;
		
		private double _SquareArea;
		
		private string _WorldPart;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnCapitalNameChanging(string value);
    partial void OnCapitalNameChanged();
    partial void OnInhabitantsNumberChanging(long value);
    partial void OnInhabitantsNumberChanged();
    partial void OnSquareAreaChanging(double value);
    partial void OnSquareAreaChanged();
    partial void OnWorldPartChanging(string value);
    partial void OnWorldPartChanged();
    #endregion
		
		public Table1()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CapitalName
		{
			get
			{
				return this._CapitalName;
			}
			set
			{
				if ((this._CapitalName != value))
				{
					this.OnCapitalNameChanging(value);
					this.SendPropertyChanging();
					this._CapitalName = value;
					this.SendPropertyChanged("CapitalName");
					this.OnCapitalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InhabitantsNumber", DbType="BigInt NOT NULL")]
		public long InhabitantsNumber
		{
			get
			{
				return this._InhabitantsNumber;
			}
			set
			{
				if ((this._InhabitantsNumber != value))
				{
					this.OnInhabitantsNumberChanging(value);
					this.SendPropertyChanging();
					this._InhabitantsNumber = value;
					this.SendPropertyChanged("InhabitantsNumber");
					this.OnInhabitantsNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SquareArea", DbType="Float NOT NULL")]
		public double SquareArea
		{
			get
			{
				return this._SquareArea;
			}
			set
			{
				if ((this._SquareArea != value))
				{
					this.OnSquareAreaChanging(value);
					this.SendPropertyChanging();
					this._SquareArea = value;
					this.SendPropertyChanged("SquareArea");
					this.OnSquareAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorldPart", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string WorldPart
		{
			get
			{
				return this._WorldPart;
			}
			set
			{
				if ((this._WorldPart != value))
				{
					this.OnWorldPartChanging(value);
					this.SendPropertyChanging();
					this._WorldPart = value;
					this.SendPropertyChanged("WorldPart");
					this.OnWorldPartChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
